generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  zohoCustomerId   String?
  accounts         Account[]
  checkoutSessions CheckoutSession[]
  posts            Post[]
  sessions         Session[]
  zohoAccountLink  ZohoAccountLink?
  orders           Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CheckoutSession {
  id          String                    @id @default(cuid())
  userId      String
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  status      String
  module      String?
  cardLast4   String?
  agreement   AgreementSignatureStatus?
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyInfo CompanyInfo?
  salesOrder  SalesOrder?
}

model ZohoAccountLink {
  id           String   @id @default(cuid())
  userId       String   @unique
  zohoUserId   String
  orgId        String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SalesOrder {
  id                String          @id @default(cuid())
  checkoutSessionId String          @unique
  zohoSalesOrderId  String?
  amount            Float
  currency          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
}

model AgreementSignatureStatus {
  id                String          @id @default(cuid())
  checkoutSessionId String          @unique
  provider          String
  envelopeId        String?
  status            String
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
}

model CompanyInfo {
  id                String          @id @default(cuid())
  checkoutSessionId String          @unique
  companyName       String
  contactName       String
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?         @default("US")
  industry          String?
  companySize       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
}

model Order {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        String    @default("pending") // pending, paid, fulfilled, cancelled
  total         Float
  zohoInvoiceId String?   @unique

  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  items         OrderItem[]
  shippingDetails ShippingDetails?

  @@index([userId])
}

model OrderItem {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  quantity    Int

  // Relations
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model ShippingDetails {
  id          String    @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  country     String

  // Relations
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id])
}
