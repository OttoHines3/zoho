// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  checkoutSessions CheckoutSession[]
  zohoAccountLink  ZohoAccountLink?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Custom Models for Zoho Integration Workflow ---

model CheckoutSession {
  id         String                    @id @default(cuid())
  user       User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  status     String // e.g. 'pending', 'completed', etc.
  module     String? // What module/product is being checked out
  cardLast4  String? // Last 4 digits of card used
  salesOrder SalesOrder?
  agreement  AgreementSignatureStatus?
}

model ZohoAccountLink {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  zohoUserId   String // Zoho CRM user/contact ID
  orgId        String? // Zoho organization ID
  refreshToken String? // Zoho OAuth refresh token
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SalesOrder {
  id                String          @id @default(cuid())
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
  checkoutSessionId String          @unique
  zohoSalesOrderId  String? // Zoho CRM sales order ID
  amount            Float
  currency          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model AgreementSignatureStatus {
  id                String          @id @default(cuid())
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
  checkoutSessionId String          @unique
  provider          String // 'DocuSign', 'PandaDoc', etc.
  envelopeId        String? // Envelope/document ID from provider
  status            String // 'pending', 'signed', 'declined', etc.
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}
